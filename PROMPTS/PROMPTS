[agent.json audit]

Analyze the provided agent.json file, which defines an agent for Google's ecosystem (ADK/A2A). Your analysis must be structured into the five sections below. For each section that requires criteria (Rating, Security, Audit), you must first explicitly define the criteria you will use for your evaluation.

1. Overall Rating (1-10)
First, define at least four critical criteria for evaluating a high-quality agent.json file (e.g., Completeness, Clarity, Efficiency, Extensibility). Then, rate the provided agent.json against each criterion and provide a final, weighted overall score from 1-10, including a brief justification for your rating.

2. Key Feature Extraction
Define what constitutes a "key feature" in the context of an agent.json file. These should be the core components that dictate the agent's primary purpose, capabilities, and interaction model. Based on your definition, extract and summarize the key features of this agent, including:

Core Functionality: What is the agent's primary purpose?

Tool Definitions: What specific tools (functions, APIs) does it expose?

Authentication & Authorization: How does it manage access and security?

Data Schemas: What are the primary data models it uses for requests and responses?

3. Security Analysis & Recommendations
Define your security analysis criteria (e.g., Authentication Strength, Authorization Granularity, Input Sanitization, Data Privacy, Endpoint Security). Conduct a thorough security review based on these criteria.

Identify potential vulnerabilities or weaknesses within the configuration.

Provide specific, actionable recommendations to mitigate each identified risk.

Conclude with an overall security score from 1-10.

4. Audit & Best Practices
Define your audit criteria for operational readiness and maintainability (e.g., Scalability, Observability, Versioning, Adherence to A2A Standards, Code Maintainability). Perform an audit of the agent.json against these criteria.

Identify areas where the configuration deviates from best practices.

Provide concrete suggestions for improvement related to robustness, scalability, and long-term maintenance.

Conclude with an overall audit score from 1-10.

5. Final Score & Executive Summary
Provide a single, holistic overall score from 1-10. This score should synthesize your findings from the rating, security, and audit sections. Accompany the score with a concise executive summary that highlights the agent's primary strengths and its most critical areas for improvement.

Analyze the following agent.json content:

[prompt audit]
Analyze the user-provided prompt below. Your analysis must be structured into the five sections that follow. For each section requiring evaluation criteria (Rating, Security, Audit), you must first explicitly define the criteria you will use.

1. Overall Rating (1-10)
First, define at least four critical criteria for a high-quality and effective prompt (e.g., Clarity & Specificity, Contextual Sufficiency, Constraint Definition, Goal Alignment). Rate the provided prompt against each criterion, provide a brief justification, and then give a final, weighted overall score from 1-10.

2. Key Feature Extraction
Define what constitutes a "key feature" of a prompt (e.g., the Core Task, Persona/Role, Input Data, and Output Format). Based on your definition, extract and summarize the key features of this prompt to explain what it's asking the AI to do and how it's supposed to do it.

3. Security Analysis & Recommendations
Define your security analysis criteria for a prompt. Focus on potential misuse and vulnerabilities (e.g., Prompt Injection Risk, Data Leakage Potential, Bias Encouragement, Harmful Instruction Ambiguity).

Analyze the prompt for any potential security flaws based on your criteria.

Provide specific, actionable suggestions to make the prompt safer and more robust against manipulation or unintended harmful outputs.

Conclude with an overall security score from 1-10.

4. Audit for Best Practices & Recommendations
Define your audit criteria for prompt engineering best practices (e.g., Repeatability, Efficiency/Token-Friendliness, Reusability/Modularity, Clarity of Intent). Perform an audit of the prompt against these standards.

Identify where the prompt excels and where it falls short of best practices.

Provide concrete suggestions to improve its structure and effectiveness for consistent, high-quality results.

Conclude with an overall audit score from 1-10.

5. Final Score & Executive Summary
Provide a single, holistic overall score from 1-10. This score should synthesize your findings from the rating, security, and audit sections. Accompany the score with a concise executive summary highlighting the prompt's primary strengths and its most critical areas for improvement.

Analyze the following prompt:

[security audit]
Of course. Here is a comprehensive prompt designed to perform a security audit on a piece of code. It consolidates your requests into a more effective and professional audit structure.

The Prompt
You are an expert security code auditor. Your task is to perform a thorough security audit of the provided code snippet. Your analysis must be structured into the five sections below. For any section that requires evaluation criteria, you must first explicitly define them.

1. High-Level Security Rating (1-10)
First, define your high-level criteria for a secure codebase (e.g., Secure by Design, Clarity & Maintainability, Principle of Least Privilege). Then, provide an initial rating for the code against each criterion and a brief justification for your assessment.

2. Key Security Mechanism Analysis
Define "Key Security Mechanisms" as the core components responsible for defending the code (e.g., Authentication, Authorization, Input Validation & Sanitization, Output Encoding, Error Handling, Cryptography). Identify and analyze the implementation (or lack thereof) of these mechanisms within the provided code.

3. In-Depth Vulnerability Assessment & Recommendations
Define your vulnerability analysis criteria, referencing a standard security framework like the OWASP Top 10 (e.g., Injection, Broken Authentication, Security Misconfiguration, etc.). Conduct a line-by-line review to find potential vulnerabilities.

For each vulnerability identified, provide the following:

Vulnerability Type: (e.g., SQL Injection, Cross-Site Scripting (XSS)).

Severity: (Critical, High, Medium, Low).

Location: The specific function name and line number(s).

Explanation: A clear description of the risk and potential impact.

Actionable Recommendation: Specific guidance or a corrected code snippet to mitigate the vulnerability.

After the detailed list, provide an Overall Security Posture Score (1-10) based on the findings in this section.

4. Broader Context & Additional Suggestions
Beyond the code itself, what other security aspects are important? Consider and provide recommendations for:

Dependency Security: The risk of using outdated or vulnerable libraries.

Secret Management: The proper handling of API keys, passwords, and other secrets.

Logging and Monitoring: The need for logs to detect and respond to security incidents.

Security Testing: Suggestions for further testing (e.g., static analysis (SAST), dynamic analysis (DAST), penetration testing).

[code documentation]
You are an expert programmer tasked with writing clear, concise, and professional documentation for the provided code.

Your response must contain the complete, original code with the new documentation added directly to it. Follow these two requirements:

1. File Description:
At the very top of the code, add a multi-line comment block that provides a high-level summary of the file. This should include:

The overall purpose of the code in this file.

Any key dependencies or libraries it relies on.

A brief usage example, if applicable.

2. Function Documentation:
For every function, class, and method, add a documentation block (a "docstring") directly above its definition. Each docstring must clearly describe:

Description: What the function does.

Parameters (Args): Each argument, its expected data type, and what it represents.

Returns: The value that the function returns, including its data type.

Document the following code, which is written in [Specify Language, e.g., Python, JavaScript, etc.]: